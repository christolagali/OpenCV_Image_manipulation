/*
	A basic extension of the java.awt.Frame class
 */

import java.awt.*;
import java.io.*;
import java.awt.image.*;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

//import symantec.itools.multimedia.ImageViewer;
public class ImageFrame extends Frame
{
   
    Image img;  //spatial image
    boolean verbose=false;
    int slidmin=0,slidmax=400;
    public int fps;
    BufferedImage savImg;
    
  //{{DECLARE_MENUS
  	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
  	java.awt.Menu menu1 = new java.awt.Menu();
  	java.awt.Menu menu2 = new java.awt.Menu();
  	java.awt.Menu menu3 = new java.awt.Menu();
  	java.awt.MenuItem miSave = new java.awt.MenuItem();
  	java.awt.MenuItem miHide = new java.awt.MenuItem();
  	java.awt.MenuItem miundo= new java.awt.MenuItem();
  	java.awt.MenuItem miThresh = new java.awt.MenuItem();
  	java.awt.MenuItem miNeg = new java.awt.MenuItem();
  	java.awt.MenuItem miEdgeDet = new java.awt.MenuItem();
  	java.awt.MenuItem miContStretch = new java.awt.MenuItem();
  	//}}
  	
    // Used for addNotify check.
  	boolean fComponentsAdjusted = false;

  	//{{DECLARE_CONTROLS
  	java.awt.Button button_Hide = new java.awt.Button();
  	//symantec.itools.multimedia.ImageViewer imageViewer = new symantec.itools.multimedia.ImageViewer();
  	javax.swing.JScrollPane imageViewer = new javax.swing.JScrollPane();
  	javax.swing.JLabel imagejLabel = new JLabel();
  	java.awt.FileDialog saveFileDialog1 = new java.awt.FileDialog(this);
  	
  	javax.swing.JSlider slide=new javax.swing.JSlider(JSlider.HORIZONTAL,slidmin,slidmax,50);
  	Button setContrast=new Button("SetContrast");
	JPanel jp=new JPanel();
  	//}}

  	//ActiveImage and backupImage objects
  	ImageData activeImage,backupImage;
  	ImageData jusImage;
   int flg=0;
  
	public ImageFrame()
	{
	
       
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(java.awt.Color.white);
		setForeground(java.awt.Color.black);
		setSize(281,285);
		setVisible(false);

		add(jp);
		jp.setBackground(java.awt.Color.lightGray);
		jp.add(slide);
		jp.setBounds(50, 0, 300, 30);
		//jp.setBounds(50, 0, 200, 30);
		slide.setBackground(java.awt.Color.white);
		slide.setBounds(0, 0, 48, 50);
		jp.add(setContrast);
		setContrast.setBackground(java.awt.Color.lightGray);
		setContrast.setBounds(150, 0, 50, 30);
		button_Hide.setLabel("Hide");
		add(button_Hide);
		button_Hide.setBackground(java.awt.Color.lightGray);
		button_Hide.setBounds(0,0,48,24);
		

		add(imageViewer);
	
		imageViewer.setBounds(36,36,195,168);
		saveFileDialog1.setMode(FileDialog.SAVE);
		saveFileDialog1.setTitle("Save");
		saveFileDialog1.setFile("*.raw");
		//$$ saveFileDialog1.move(0,0);
		
		setTitle("Input");
		//}}

		//{{INIT_MENUS
		menu1.setLabel("File");
		menu1.add(miSave);
		menu2.setLabel("Edit");
		miSave.setLabel("Save Raw Data");
		miSave.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S,false));
		miundo.setLabel("Undo");
		miundo.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_Z,false));
		menu1.add(miHide);
		miHide.setLabel("Hide");		
		menu2.add(miundo);
		menu3.setLabel("Process");
		miThresh.setLabel("Threshold");
		menu3.add(miThresh);
		miNeg.setLabel("Negative");
		menu3.add(miNeg);
		miEdgeDet.setLabel("Edge Detection");
		menu3.add(miEdgeDet);
		miContStretch.setLabel("Constrast Stretch");
		menu3.add(miContStretch);
		
		mainMenuBar.add(menu1);
		mainMenuBar.add(menu2);
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(48,0);
		setMenuBar(mainMenuBar);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		button_Hide.addActionListener(lSymAction);
		miSave.addActionListener(lSymAction);
		miHide.addActionListener(lSymAction);
		miundo.addActionListener(lSymAction);
		
		//these are listeners registered for Menu Items of the operations we hope to conduct.
		miThresh.addActionListener(lSymAction);
		miNeg.addActionListener(lSymAction);
		miEdgeDet.addActionListener(lSymAction);
		miContStretch.addActionListener(lSymAction);
		slide.addChangeListener(lSymAction);
		setContrast.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		
		
		//}}
		
	
	}

	public ImageFrame(String title)
	{
		this();
		setTitle(title);
	}
	/**
	 *Stores the spatial image in case want to toggle
	 * the display between this and wavelet image
	 */
	public void setImage(Image image)
	{  
		//Gathering the image and storing in activeImage object plus displaying it.
		img = image;
		int height=0,width=0;
		System.out.println("Going to set image)");
	   try{
		   ImageIcon imageIcon = new ImageIcon(image);
	       
		   imagejLabel.setIcon(imageIcon);
		   imagejLabel.setSize(image.getWidth(this),image.getHeight(this));
		
		   //Setting up activeImage
		   height=img.getHeight(null);
		   width=img.getWidth(null);
		   activeImage=new ImageData(img, "JPEG", height, width,0);
		   
		   jusImage=new ImageData(img, "JPEG", height, width,'c');
		   
		   if(flg==0)
		   {
			   backupImage=new ImageData(img, "JPEG", height, width,0);
		   }
		  
	//created a backup of the activeImage and now ready for manipulation
	//backupImage=activeImage;
		   
		   
		   //  imageViewer.setImage(img);
	      imageViewer.removeAll();
	      imageViewer.add(imagejLabel);
	      
	    //flg is a flag that will allow us to keep a backup only once
	      flg=1;								
	      imageViewer.validate();
	    }catch(Exception e)
	    { }
	    try{
	        imageViewer.setSize(img.getWidth(this),img.getHeight(this));
	        this.setSize(img.getWidth(this)+200, img.getHeight(this)+200);
	        repaint();       
	    } catch(Exception e) {}   
	}    
	
	
	   
	   
	/**
	 *Stores the currently displayed image data into
	 * a file as raw GREYSCALE image data format
	 */
	public void storeGreyscaleImage(String filename)throws IOException
	{ 
	  
	    int rows, cols, pixel, alpha, red, green,blue;
	     
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        //Write out each pixel as integers
        rows = img.getHeight(this);
        cols = img.getWidth(this);
        int pixels[] = new int[rows*cols];
        PixelGrabber pg = new PixelGrabber(img, 0,0, cols, rows, pixels, 0, rows);
        try{ pg.grabPixels();}
        catch(InterruptedException e) {
    	    System.err.println("interrupted waiting for pixels!");
    	}
	
         
        for(int r=0; r<rows; r++)
	    for(int c=0; c<cols; c++) {
            pixel = pixels[r*cols + c];
	        alpha = (pixel >> 24) & 0xff;
            red   = (pixel >> 16) & 0xff;
            green = (pixel >>  8) & 0xff;
            blue  = (pixel      ) & 0xff;
            
            if(verbose)
    	        {System.out.println("value: " + (int)((red+green+blue)/3));
    	         System.out.println(" R,G,B: " + red +"," + green +"," + blue); }
	   
 	        DO.writeByte((int)((red+green+blue)/3));	
 	        
        }	

        //flush Stream
        DO.flush();
        //close Stream
        DO.close();

    }
    
    
    /**
	 *Stores the currently displayed image data into
	 * a file as COLOR raw image data format
	 */
	public void storeColorImage(String filename)throws IOException
	{ 
	    
	    int rows, cols, pixel, alpha, red, green,blue;
	    
	   
            
	        
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        //Write out each pixel as integers
        rows = img.getHeight(this);
        cols = img.getWidth(this);
        int pixels[] = new int[rows*cols];
        PixelGrabber pg = new PixelGrabber(img, 0,0, cols, rows, pixels, 0, cols);
        try{ pg.grabPixels();}
        catch(InterruptedException e) {
    	    System.err.println("interrupted waiting for pixels!");
    	}
	
        System.out.println("...storing as color, "+rows +" x " + cols);
        
        for(int r=0; r<rows; r++)
	    for(int c=0; c<cols; c++) {
            pixel = pixels[r*cols + c];
	        alpha = (pixel >> 24) & 0xff;
            red   = (pixel >> 16) & 0xff;
            green = (pixel >>  8) & 0xff;
            blue  = (pixel      ) & 0xff;
            if(verbose)//verbose
    	        {System.out.println("value: " + (int)((red+green+blue)/3));
    	         System.out.println(" R,G,B: " + red +"," + green +"," + blue); }
	   
 	        DO.writeByte(red);
 	        DO.writeByte(green);
 	        DO.writeByte(blue);
        }	

        //flush Stream
        DO.flush();
        //close Stream
        DO.close();

    }

	// This is a customized function that stores an image as a color image
	// hence the name.
	public void storeChrisImage(String filename)throws IOException
	{ 
	    
	    int rows, cols, pixel, alpha, red, green,blue;
	    
	   
            
	        
        //Open up file	
        FileOutputStream file_output = new FileOutputStream(filename);
        DataOutputStream DO = new DataOutputStream(file_output);
 
 
        int w=img.getWidth(null);
        int h=img.getHeight(null);
        
        int [] pixels=new int[w*h];
        PixelGrabber pg= new PixelGrabber(img, 0, 0, w, h, pixels,0,w);
        
        try
        {
        	pg.grabPixels();
        }
        catch(InterruptedException ie)
        {
        	ie.printStackTrace();
        }
        savImg=new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        savImg.setRGB(0, 0, w,h,pixels,0,w);
        
        FileOutputStream fos=new FileOutputStream(filename);
        JPEGImageEncoder jpeg=JPEGCodec.createJPEGEncoder(fos);
        jpeg.encode(savImg);
        fos.close();
    }

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new ImageFrame()).setVisible(true);
	}
	
	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

  
	

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageFrame.this)
				ImageFrame_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ImageFrame.this)
				Frame1_WindowClosing(event);
		}
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}

	class SymAction implements java.awt.event.ActionListener, ChangeListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == button_Hide)
				buttonHide_ActionPerformed(event);
			else if (object == miSave)
				miSave_ActionPerformed(event);
			else if (object == miHide)
				miHide_ActionPerformed(event);
			else if (object ==  miundo)
				miundo_ActionPerformed(event);
			else if(object == miThresh)
				miThresh_ActionPerformed(event);
			else if(object ==  miNeg)
				miNeg_ActionPerformed(event);
			else if(object == miEdgeDet)
				miEdgeDet_ActionPerformed(event);
			else if(object == miContStretch)
				miContStretch_ActionPerformed(event);
			else if(object == setContrast)
				setContrast_ActionPerformed(event);
		}
		//The overridden listener method for JSlider that handles the contrast of the image
		public void stateChanged(ChangeEvent e)
		{
			if(e.getSource()==slide)
			{
				fps=slide.getValue();
				//System.out.println("Fired Event!!"+fps);

			}
		}
	}

	void buttonHide_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 flg=0;
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}

    /**
      *Save Image data in raw format
      */
	void miSave_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		String Save_filename;	 
			 
		//{{CONNECTION
		// Show the SaveFileDialog
		saveFileDialog1.setVisible(true);
		//}}
		
		//GET FILENAME
		
		Save_filename = (saveFileDialog1.getDirectory()).concat(saveFileDialog1.getFile()); 
		
		System.out.println("Save info: " + Save_filename);
		
		//Store currently displayed info
		try {
    		
    		storeChrisImage(Save_filename);
			
        } catch (IOException e)
        {}
		
	}

	void miHide_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		/* I am setting the flag flg to 0
		 this allows the application to take a fresh backup 
		 of the image.*/
			 flg=0;
		//{{CONNECTION
		// Hide the Frame
		setVisible(false);
		//}}
	}
	
	/*Perform action when Undo option is selected */
	void miundo_ActionPerformed(java.awt.event.ActionEvent event)
	{
		System.out.println("loading backed up Image Data into activeData");
		
		Object[] opts={"Ok","Cancel"};
		int n=JOptionPane.showOptionDialog(null, "Do you want to Undo the Chnages made?", "Undo Selected!", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opts, opts[0]);
		if(n==0)
		{
			
			activeImage=backupImage;
			//Reconstruct the image

			Image rimg=backupImage.createImage(0);
			setImage(rimg);
		}
		else
		{
			System.out.println("I didnt do undo!! :( ");
		}
	}

	/*This is when threshold option is selected*/
	void miThresh_ActionPerformed(java.awt.event.ActionEvent event)
	{
		System.out.println("We are gona do Thresholding!!");
		int v=Integer.parseInt(JOptionPane.showInputDialog("Enter a Value to threshold!"));
		Image thresh = null;
		if(v<0 || v>255)
		{
			JOptionPane.showMessageDialog(getParent(), "The Value Should be 0 - 255");
			v=Integer.parseInt(JOptionPane.showInputDialog("Enter a Value to threshold!"));
		}
		else
		{
			thresh=activeImage.createThreshold(v);
			
		}
		setImage(thresh);
	}
	
	/*This is executed when the Negative option is selected*/
	void miNeg_ActionPerformed(java.awt.event.ActionEvent event)
	{
		System.out.println("Wer are gona take out a Negative!!");
		Image negimg=activeImage.createNegative();
		setImage(negimg);
	}
	
	/* This is executed when the Edge Detection option is selected */
	void miEdgeDet_ActionPerformed(java.awt.event.ActionEvent event)
	{
		System.out.println("Wer are gona go the Sobel Way!!");
		Image eimg=jusImage.find_Edges();
		
		setImage(eimg);
	}
	
	/* This is executed when the Contrast Stretch option is selected */
	void miContStretch_ActionPerformed(java.awt.event.ActionEvent event)
	{
		System.out.println("Contrast Stretch!!");
		Image cimg=activeImage.cont_stretch(0);
		setImage(cimg);
	}
	
	/* This method handles the click of Button for Setting the contrast */
	void setContrast_ActionPerformed(java.awt.event.ActionEvent event)
	{
		System.out.println("Button CLicked!!"+fps);
		Object[] opts={"Ok","Cancel"};
		int c=JOptionPane.showOptionDialog(null, "Do you want to Change the Contrast? Setting it to : "+fps, "Contrast!", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opts, opts[0]);
		
		if(c==0)
		{
			Image cimg=activeImage.cont_stretch(fps);
			setImage(cimg);
		}
		else
		{
			System.out.println("Select Value");
		}
	}
	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
		}
	}
	

	void ImageFrame_WindowOpened(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}
	
}
